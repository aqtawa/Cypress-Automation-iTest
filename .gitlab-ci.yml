stages:
  - test
# For recording and parallelization to work you must set your CYPRESS_RECORD_KEY
# in GitLab repo → Settings → CI/CD → Variables
variables:
  # CYPRESS_RECORD_KEY: $CYPRESS_RECORD_KEY

  CYPRESS_RECORD_KEY: ebdde825-7dd6-48a7-9295-200e61fe4b57
  projectId: ${CI_PROJECT_ID}
# Caches dependencies using npm lock file as key
# https://docs.cypress.io/guides/continuous-integration/introduction#Caching
cache:
  key:
    files:
      - package-lock.json
  paths:
    - .npm/ # Moves npm cache inside project per GitLab restrictions
test:
  environment:
    name: ${CI_COMMIT_BRANCH} 
  tags:
    - docker-dev-server2
  # Uses official Cypress docker image for dependencies
  # https://docs.cypress.io/guides/continuous-integration/introduction#Official-Cypress-Docker-Images
  image: cypress/browsers:node18.12.0-chrome107
  stage: test
  script:    
    # - npm install common-tags    # Starts web server for E2E tests - replace with your own server invocation
    # https://docs.cypress.io/guides/continuous-integration/introduction#Boot-your-server
    #- npx wait-on 'http-get://localhost:3000' # Waits for above
    # Runs tests in parallel and records to Cypress Cloud
    # https://docs.cypress.io/guides/cloud/projects#Set-up-a-project-to-record
    # https://docs.cypress.io/guides/guides/parallelization
    - npm ci
    - npx cypress run --record --browser chrome
    #
